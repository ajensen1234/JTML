name: CMake

on:
  push:
    branches: [ "actions-test" ]
  pull_request:
    branches: [ "actions-test" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  linux-build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Install Qt
      uses: jurplel/install-qt-action@v3

    - name: Download and build VTK
      run: |
        cd ~
        wget -q https://vtk.org/files/release/9.2/VTK-9.2.6.tar.gz
        tar -xzf VTK-9.2.6.tar.gz
        cd VTK-9.2.6
        mkdir build -p && cd build
        cmake .. -DVTK_GROUP_ENABLE_Qt=YES
        cmake .. -DVTK_GROUP_ENABLE_Qt=YES
        cmake --build .

    - name: Download and build opencv
      run: |
        cd ~
        wget -q -O ~/opencv.zip https://github.com/opencv/opencv/archive/4.5.5.zip
        ls ~
        echo "++++++++++++++++++++++++++"
        unzip -q opencv.zip
        ls ~
        cd opencv-4.5.5
        mkdir -p build && cd build
        cmake ..
        cmake --build .
    - uses: Jimver/cuda-toolkit@v0.2.10
      id: cuda-toolkit
      with:
        cuda: 12.1.0

    - name: Libtorch download and unzip
      run: |
        cd ~
        wget -q -O ~/libtorch.zip https://download.pytorch.org/libtorch/cu118/libtorch-cxx11-abi-shared-with-deps-2.0.0%2Bcu118.zip
        ls ~
        unzip ~/libtorch.zip
        ls ~/libtorch
    - name: Edit ivalue_inl.h for slots conflict
      run: |
        sed -i '28i#undef slots;' ~/libtorch/include/ATen/core/ivalue_inl.h

    - name: Testing NVCC
      run: |
        nvcc --version

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH=/libtorch/share/cmake/Torch/

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

